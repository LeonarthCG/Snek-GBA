//making the header

#define armJump(label) "WORD 0xEA000000 + (((label-currentoffset-8)/4)&0xFFFFFF)"

ORG $0
armJump(romStart) //arm instruction, jump to 0xC0
#incbin "bitmap.bin" //displayed, then checked on bootup, gba hangs without this
BYTE 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 //uppercase ascii, max 12 characters
BYTE 0x20 0x20 0x20 0x20 //uppercase ascii, 4 characters
BYTE 0x20 0x20 //uppercase ascii, 2 characters
BYTE $96 //fixed value
BYTE 0 //main unit, 0 for gba
BYTE 0 //device type
BYTE 0 0 0 0 0 0 0 //some empty bytes
BYTE 0 //software version
BYTE $A7 //checksum of bytes A0 to BC, ((0 - each byte) - $19 )&0xFF, I should make a tool to calculate it at some point
SHORT 0 //some empty bytes

//the strings for the header
PUSH; ORG $A0; String(DEMO); POP
PUSH; ORG $AC; String(DEMO); POP
PUSH; ORG $B0; String(00); POP

romStart:
#inctext lyn "ASM\boot.elf" //change to thumb and set the background layers, tiles and palettes up

#include "ASM.event"

#include "Graphics.event"

ALIGN 4
bgTilemapsBuffer:
WORD $03000000
WORD $03000800
WORD $03001000
WORD $03001800

ALIGN 4
bgTilemaps:
WORD $0600F800
WORD $0600F000
WORD $0600E800
WORD $0600E000

ALIGN 4
speedTSAs:
POIN slowTSA
POIN normalTSA
POIN fastTSA
POIN tasTSA

ALIGN 4
speedSpeeds:
BYTE 16
BYTE 8
BYTE 4
BYTE 1

ALIGN 4
creditImages:
POIN credits1IMG
POIN credits2IMG
POIN credits3IMG
WORD 0

/*
facing directions of the snake:
     1
     ^
     |
0 <- o -> 3
     |
     v
     2
*/

//the snake's longest possible length is 540, so I'm going to limit it to that and cause a game over if it's reched (with a win message?)
